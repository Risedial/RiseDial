name: Deploy Risedial

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: risedial_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:test_password@localhost:5432/risedial_test" >> .env.test
          echo "NODE_ENV=test" >> .env.test

      - name: Run database setup
        run: npm run db:setup:test

      - name: Run TypeScript checks
        run: npm run type-check

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Run crisis detection validation
        run: npm run test:crisis

      - name: Generate test coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Run dependency vulnerability scan
        run: npm run security:scan

      - name: Check for hardcoded secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Validate build artifacts
        run: |
          test -d .next || exit 1
          test -f .next/BUILD_ID || exit 1

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--env ENVIRONMENT=staging'

      - name: Run smoke tests
        run: |
          npm install -g wait-on
          wait-on https://risedial-staging.vercel.app/api/health
          npm run test:smoke -- --base-url=https://risedial-staging.vercel.app

      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: 'Staging deployment completed successfully! ðŸš€'

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pre-deployment health check
        run: |
          curl -f https://api.risedial.com/health || exit 1

      - name: Create deployment record
        run: |
          echo "DEPLOYMENT_ID=$(date +%s)" >> $GITHUB_ENV
          echo "DEPLOYMENT_TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Setup Telegram webhook
        run: |
          node scripts/setup/setup-webhook.js
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          WEBHOOK_URL: https://api.risedial.com/api/telegram-webhook

      - name: Run production smoke tests
        run: |
          wait-on https://api.risedial.com/api/health
          npm run test:smoke -- --base-url=https://api.risedial.com

      - name: Validate crisis detection
        run: npm run test:crisis:production

      - name: Post-deployment monitoring
        run: |
          # Set up enhanced monitoring for 24 hours
          node scripts/monitoring/enhanced-monitoring.js --duration=24h

      - name: Notify stakeholders
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#general'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            ðŸŽ‰ Production deployment successful!
            
            **Deployment ID:** ${{ env.DEPLOYMENT_ID }}
            **Timestamp:** ${{ env.DEPLOYMENT_TIMESTAMP }}
            **Health Check:** âœ… Passing
            **Crisis Detection:** âœ… Validated

  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Trigger rollback
        run: |
          echo "Production deployment failed. Initiating rollback..."
          node scripts/deployment/rollback.js --env=production

      - name: Notify emergency
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          channel: '#alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            ðŸš¨ EMERGENCY: Production deployment failed!
            
            Automatic rollback initiated.
            Manual intervention may be required.
            
            @channel @oncall 